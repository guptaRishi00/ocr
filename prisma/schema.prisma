// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String    // Hashed password for credentials provider
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ocrResponses  OcrResponse[]
  contacts      Contact[]
  emailCampaigns EmailCampaign[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Legacy Card model (keeping for compatibility)
model Card {
  id      Int    @id @default(autoincrement())
  email   String @unique
  name    String
  address String
  number  Int
}

model OcrResponse {
  id             Int      @id @default(autoincrement())
  userId         String?  // Foreign key to User (nullable for migration)
  originalName   String?  // Original filename of uploaded image
  extractedText  String   @db.Text
  imageSize      Int?     // Size of the image in bytes
  mimeType       String?  // MIME type of the image
  processingTime Int?     // Time taken to process in milliseconds
  isDemo         Boolean  @default(false) // Flag for demo responses
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts Contact[] // One OCR response can create multiple contacts

  @@map("ocr_responses")
}

// Business Contact model for storing extracted business card data
model Contact {
  id          Int      @id @default(autoincrement())
  userId      String   // Foreign key to User
  name        String
  title       String?
  company     String?
  email       String?
  phone       String?
  address     String?
  website     String?
  notes       String?  @db.Text
  status      String   @default("new") // new, active, pending, archived
  tags        String[] // Array of tags for categorization
  lastContact DateTime?
  ocrResponseId Int?   // Link to the OCR response that created this contact
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  ocrResponse OcrResponse? @relation(fields: [ocrResponseId], references: [id])
  emailLogs EmailLog[]

  @@map("contacts")
}

// Email Campaign model
model EmailCampaign {
  id          Int      @id @default(autoincrement())
  userId      String   // Foreign key to User
  name        String
  subject     String
  content     String   @db.Text
  status      String   @default("draft") // draft, sent, scheduled
  sentCount   Int      @default(0)
  openCount   Int      @default(0)
  clickCount  Int      @default(0)
  scheduledAt DateTime?
  sentAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailLogs EmailLog[]

  @@map("email_campaigns")
}

// Email Log model to track individual email sends
model EmailLog {
  id          Int      @id @default(autoincrement())
  campaignId  Int
  contactId   Int
  status      String   // sent, delivered, opened, clicked, bounced
  sentAt      DateTime @default(now())
  openedAt    DateTime?
  clickedAt   DateTime?

  campaign EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact  Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("email_logs")
}
